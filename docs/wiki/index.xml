<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Wiki on</title><link>https://mmx-world.github.io/mmx-node-www/docs/wiki/</link><description>Recent content in Wiki on</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://mmx-world.github.io/mmx-node-www/docs/wiki/index.xml" rel="self" type="application/rss+xml"/><item><title>Overview</title><link>https://mmx-world.github.io/mmx-node-www/docs/wiki/home/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mmx-world.github.io/mmx-node-www/docs/wiki/home/</guid><description>MMX is a blockchain written from scratch using proven logic from Chia&amp;rsquo;s Proof of Space and SHA256 VDF similar to Solana.
Main features are:
High performance code (1000 transactions per second or more) Custom high-level VM for smart contracts (similar to JavaScript) Variable supply (block reward scales with netspace, but also capped by TX fees) Consistent block times (created every 10 seconds) Native token and NFT support (atomic swaps with standard transactions) Smart contract offers for on-chain trading Energy efficient Proof of Space (same as Chia) Standard ECDSA signatures for seamless integration (same as Bitcoin) MMX is designed to be a blockchain that can be used as an actual currency.</description></item><item><title>Instalation</title><link>https://mmx-world.github.io/mmx-node-www/docs/wiki/installation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mmx-world.github.io/mmx-node-www/docs/wiki/installation/</guid><description>Dependencies # Windows binaries and executables: https://github.com/stotiks/mmx-node/releases
Note: OpenCL packages are optional, ie. ocl-icd-opencl-dev, etc.
Ubuntu Linux:
sudo apt update sudo apt install git cmake build-essential libsecp256k1-dev libsodium-dev libminiupnpc-dev libjemalloc-dev zlib1g-dev ocl-icd-opencl-dev clinfo screen Arch Linux:
sudo pacman -Syu sudo pacman -S base-devel git cmake zlib libsecp256k1 libsodium miniupnpc jemalloc opencl-headers ocl-icd clinfo screen Fedora Linux:
yum install kernel-devel git cmake clinfo gcc gcc-c++ libsecp256k1-devel libsodium-devel miniupnpc-devel jemalloc-devel ocl-icd-devel opencl-headers opencl-utils ghc-zlib OpenCL provides faster and more efficient VDF verification using an integrated or dedicated GPU.</description></item><item><title>Getting Started</title><link>https://mmx-world.github.io/mmx-node-www/docs/wiki/getting-started/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mmx-world.github.io/mmx-node-www/docs/wiki/getting-started/</guid><description>To continue enter the CLI environment:
cd mmx-node source ./activate.sh Creating a Wallet # mmx wallet create [-f filename] The file name argument is optional, by default it is wallet.dat, which is already included in the default configuration.
To use more wallets add the paths to key_files array in config/local/Wallet.json.
To create a wallet with a known seed hash:
mmx wallet create &amp;lt;seed_hash&amp;gt; [-f filename] To create a wallet with a known mnemonic seed:</description></item><item><title>CLI Commands</title><link>https://mmx-world.github.io/mmx-node-www/docs/wiki/cli-commands/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mmx-world.github.io/mmx-node-www/docs/wiki/cli-commands/</guid><description>To use the CLI:
cd mmx-node source ./activate.sh For Windows: Use the shortcut in the start menu or manually run mmx_cmd.cmd from a terminal/command prompt.
To run any mmx commands (except mmx wallet create), the node needs to be running. See Getting Started to read on how to start it.
Node CLI # To check on the node: mmx node info
To check on the peers: mmx node peers
To check on a transaction: mmx node tx &amp;lt;txid&amp;gt;</description></item><item><title>Access WebGUI</title><link>https://mmx-world.github.io/mmx-node-www/docs/wiki/access-webgui/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mmx-world.github.io/mmx-node-www/docs/wiki/access-webgui/</guid><description>To access WebGUI, go to: http://localhost:11380/gui/
Check $MMX_HOME/PASSWD for the login password, it&amp;rsquo;s automatically generated at first launch.
Only available on localhost, because of full access to your wallet.</description></item><item><title>Optimizations for VDF Verification</title><link>https://mmx-world.github.io/mmx-node-www/docs/wiki/optimizations-for-vdf-verification/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mmx-world.github.io/mmx-node-www/docs/wiki/optimizations-for-vdf-verification/</guid><description>Using OpenCL is an optional (but highly recommended) feature for farming MMX. Offloading the verification of the VDF from the CPU to an OpenCL accelerated GPU (even an APU with integrated GPU) can increase both performance and power efficiency.
Example Hardware and times spreadsheet (go to current testnet tab): Google Docs
During initial blockchain sync, CPU usage will be very high in any case.
Once the blockchain is synced, you will see these lines:</description></item><item><title>Remote Services</title><link>https://mmx-world.github.io/mmx-node-www/docs/wiki/remote-services/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mmx-world.github.io/mmx-node-www/docs/wiki/remote-services/</guid><description>These steps are provided for farming on many machines on a single local area network, or even over a wide area network.
Remote Farmer # To run a remote farmer with it&amp;rsquo;s own wallet and harvester:
./run_farmer.sh -n node.ip:11330 Alternatively to set the node address permanently: echo node.ip:11330 &amp;gt; config/local/node
To disable the built-in farmer in the node: echo false &amp;gt; config/local/farmer
Remote Harvester # To run a remote harvester, while connecting to a node:</description></item><item><title>Creating Token Contracts</title><link>https://mmx-world.github.io/mmx-node-www/docs/wiki/creating-token-contracts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mmx-world.github.io/mmx-node-www/docs/wiki/creating-token-contracts/</guid><description>Token Contracts # Token contracts can be created either as a mint by owner only token, a mint by owner and staking token, or an ownerless staking token. The advantage of the mint only token is that the owner address controls the supply of the token, similarly for the mint and stake token, the owner can create an initial supply for immediate use, and then future supply can be provided by staking.</description></item><item><title>FAQ</title><link>https://mmx-world.github.io/mmx-node-www/docs/wiki/frequently-asked-questions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mmx-world.github.io/mmx-node-www/docs/wiki/frequently-asked-questions/</guid><description>When is mainnet launch? # Current latest estimate is Q2 2023.
What is MMX? What problem is MMX trying to solve/how is it solving any problems any differently than other blockchains? # MMX is (not) just another blockchain with a native token on it. Its code is written from scratch, using proven logic from Chia&amp;rsquo;s Proof of Space and improved SHA256 VDF similar to Solana. It&amp;rsquo;s designed to be secure, fast, high throughput and energy efficient.</description></item></channel></rss>